
Class String

Phase 1:

	To declare class string_t with following functionality:
	
default CTOR                vvvvv
CTOR from "const char*"	    vvvvv   
copy CTOR                   vvvvv
DTOR	                    vvvvv
assignment operator         vvvvv
mem-function 'length' which returns length of the string            vvvv
mem-function 'setString' which gets as a parameter "const char*"    vvvv
mem-function 'getString' which returns "const char*"                vvvv
mem-function 'compare' which compares 2 strings                     vvvv
		and returns:
		0 - if they are equal
		1 - if the object string less than parameter
		2 - if the object greater than parameter
	
		This function gets as a parameter another string
print                                                               vvvv

Phase 2:

Add to class string_t following functionality
	
1) converts string to upper/lower cases                             vvvv

2) mem-function 'prepend' which prepends a                          vvvv
character string ( both from char* and string_t )
3) Add operators: +=  from char* and from string_t                  vvvv

4) Add logical operators :     < ,  > , >= , <=,  == ,   !=         vvvv

5) mem-function 'contains', which returns 1                         vvvv
if substring is found, else returns 0


6) []	that returns i'th character of  string. Performs boundary checking ( find on Internet )                                       vvvv
7) operators << and >> for string_t                                 vvvv

Phase  3

To add to class string_t following functionality:

To add static data-members caseSens & capacity.         vvvv
If caseSens flag is on then all compare functions ( including logical operators) will work as before.
If not then to compare strings as or upper case or as low case ( "home" is equal to "HoMe" ).

	capacity - this feature is used not to reallocate memory each time when string is changed.
		Thus if capacity is 64 bytes then to allocate at least 64 bytes for string even its real 
		length is smaller. Each time when string grows to allocate ( if needed ) memory
		that will be enough big to hold string with rounded capacity index;
		
Example:
		In order to hold string of length
		100 bytes you have to allocate 128 bytes , etc.
	
1. to rewrite some functions as "inline"

2. static function which returns current 
case sensitive flag
static function which sets a new flag and returns a previous one.

3. static which returns current capacity

static which sets a new capacity and returns
a previous one.

4. function which returns index of first occurrence of some character in string

5. function which returns index of last occurrence of some character in string

6. string_t   operator()(int start, uint len);
this operator returns substring which starts in 'start' position in original string and has a length 'len';
Example:  
string_t str ="1234567890" ; 
str(4,3) returns string "567"




	Now you'll need a few private mem-functions:
make memory allocation using capacity
compare functions have to work checking case flag.			  



